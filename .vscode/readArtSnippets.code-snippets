{
    // Place your read-art workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "Create custom react function component": {
        "prefix": ["tsc"],
        "body": [
            "import { classNames } from 'shared/lib/classNames/classNames';",
            "import cls from './${TM_FILENAME_BASE}.module.scss';",
            "import { memo } from 'react';",
            "",
            "interface ${TM_FILENAME_BASE}Props {",
            "\tclassName?: string;",
            "}",
            "",
            "export const ${TM_FILENAME_BASE} = memo((props: ${TM_FILENAME_BASE}Props) => {",
            "\tconst { className } = props;",
            "",
            "\treturn (",
            "\t\t<div className={classNames(cls.${TM_FILENAME_BASE/(^.)/${1:/downcase}/}, {}, [className])}>",
            "\t\t\t$0",
            "\t\t</div>",
            "\t);",
            "});"
        ],
        "description": "Создать React-компонент по умолчанию. Импортируется scss-модуль и функция для работы c классами classNames."
    },

    "Create test": {
        "scope": "typescript, typescriptreact",
        "prefix": "tst",
        "body": [
            "describe('$TM_FILENAME_BASE', () => {",
            "\ttest('$1', () => {",
            "\t\texpect().toEqual();",
            "\t});",
            "});"
        ],
        "description": "Create template test"
    },

    "Create redux toolkit slice": {
        "prefix": "slice",
        "body": [
            "import { createSlice } from '@reduxjs/toolkit';",
            "import { ${TM_FILENAME_BASE/([^A-Z]+)(.*)/${1:/capitalize}/}Schema } from '../types/${TM_FILENAME_BASE/([^A-Z]+)(.*)/${1}/}Schema';",
            "",
            "const initialState: ${TM_FILENAME_BASE/([^A-Z]+)(.*)/${1:/capitalize}/}Schema = {};",
            "",
            "export const ${TM_FILENAME_BASE} = createSlice({",
            "\tname: '${TM_FILENAME_BASE/([^A-Z]+)(.+)/$1/}',",
            "\tinitialState,",
            "\treducers: {},",
            "});",
            "",
            "export const { actions: ${TM_FILENAME_BASE/([^A-Z]+)(.+)/$1/}Actions } = ${TM_FILENAME_BASE};",
            "export const { reducer: ${TM_FILENAME_BASE/([^A-Z]+)(.+)/$1/}Reducer } = ${TM_FILENAME_BASE};",
            ""
        ],
        "description": "Create redux toolkit slice"
    }
}